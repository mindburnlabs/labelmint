# Unified Docker Compose Configuration for LabelMint
# This file consolidates all services and resolves network/port conflicts
# Version: 3.8

# ==========================================
# Unified Network Architecture
# ==========================================
networks:
  # Frontend network for web applications and nginx
  labelmint-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

  # Backend network for APIs and application services
  labelmint-backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1

  # Data network for databases and storage
  labelmint-data:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
          gateway: 172.22.0.1

  # Dedicated monitoring network
  labelmint-monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 10.10.0.0/24
          gateway: 10.10.0.1

  # Bot services network
  labelmint-bots:
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.0.0/16
          gateway: 172.23.0.1

# ==========================================
# Volumes Configuration
# ==========================================
volumes:
  # Database volumes
  postgres_data:
    driver: local
  redis_data:
    driver: local
  redis_bots_data:
    driver: local

  # Storage volumes
  minio_data:
    driver: local

  # Application volumes
  uploads_data:
    driver: local
  logs_data:
    driver: local

  # Monitoring volumes
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  tempo_data:
    driver: local
  alertmanager_data:
    driver: local

# ==========================================
# Core Infrastructure Services
# ==========================================
services:

  # ----------------------------------------
  # Data Layer Services
  # ----------------------------------------

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: labelmint-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-labelmint}
      POSTGRES_USER: ${POSTGRES_USER:-labelmint}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql:ro
      - ./scripts/init-extensions.sql:/docker-entrypoint-initdb.d/02-init-extensions.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-labelmint} -d ${POSTGRES_DB:-labelmint}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - labelmint-data
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Main Redis Cache
  redis:
    image: redis:7-alpine
    container_name: labelmint-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    networks:
      - labelmint-data
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # MinIO S3 Storage
  minio:
    image: minio/minio:RELEASE.2024-01-16T16-07-38Z
    container_name: labelmint-minio
    restart: unless-stopped
    command: server /data --console-address ":9001" --quiet
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s
    networks:
      - labelmint-data
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ----------------------------------------
  # Application Services
  # ----------------------------------------

  # Web Application (Frontend)
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
      args:
        NEXT_PUBLIC_APP_VERSION: ${APP_VERSION:-local}
        NEXT_PUBLIC_BUILD_DATE: ${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        NEXT_PUBLIC_COMMIT_BRANCH: ${GIT_BRANCH:-local}
    container_name: labelmint-web
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3002
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3101}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:3101}
      NEXT_PUBLIC_ENVIRONMENT: ${ENVIRONMENT:-development}
      NEXT_PUBLIC_COMMIT_SHA: ${GIT_SHA:-local}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${WEB_PORT:-3000}:3002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - labelmint-frontend
      - labelmint-backend
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: labelmint-api-gateway
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3104
      UPSTREAM_SERVICES: "labeling-backend:3101,payment-backend:3103"
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - redis
      - labeling-backend
      - payment-backend
    ports:
      - "${API_GATEWAY_PORT:-3104}:3104"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3104/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - labelmint-backend
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Labeling Backend API
  labeling-backend:
    build:
      context: ./services/labeling-backend
      dockerfile: Dockerfile
    container_name: labelmint-labeling-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3101
      DATABASE_URL: postgresql://${POSTGRES_USER:-labelmint}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-labelmint}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      TON_API_KEY: ${TON_API_KEY}
      TON_MERCHANT_ADDRESS: ${TON_MERCHANT_ADDRESS}
      USDT_MASTER_CONTRACT: ${USDT_MASTER_CONTRACT}
      TELEGRAM_BOT_TOKEN_CLIENT: ${TELEGRAM_BOT_TOKEN_CLIENT}
      TELEGRAM_BOT_TOKEN_WORKER: ${TELEGRAM_BOT_TOKEN_WORKER}
      WEB_APP_URL: ${WEB_APP_URL:-http://localhost:3000}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    ports:
      - "${LABELING_BACKEND_PORT:-3101}:3101"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3101/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - labelmint-backend
      - labelmint-data
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Payment Backend API
  payment-backend:
    build:
      context: ./services/payment-backend
      dockerfile: Dockerfile.payments
    container_name: labelmint-payment-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3103
      DATABASE_URL: postgresql://${POSTGRES_USER:-labelmint}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-labelmint}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      TON_RPC_ENDPOINT: ${TON_RPC_ENDPOINT}
      PAYMENT_SECRET_KEY: ${PAYMENT_SECRET_KEY}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${PAYMENT_BACKEND_PORT:-3103}:3103"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3103/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - labelmint-backend
      - labelmint-data
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ----------------------------------------
  # Bot Services
  # ----------------------------------------

  # Bot Services Redis (separate instance)
  redis-bots:
    image: redis:7-alpine
    container_name: labelmint-bots-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_bots_data:/data
    ports:
      - "${REDIS_BOTS_PORT:-6380}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - labelmint-bots
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Client Bot
  client-bot:
    build:
      context: ./services/bots/client-bot
      dockerfile: Dockerfile
    container_name: labelmint-client-bot
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      BOT_TOKEN: ${CLIENT_BOT_TOKEN}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-bots:6379
      LABELING_API_URL: http://labeling-backend:3101
      PAYMENT_API_URL: http://payment-backend:3103
      WS_URL: ws://labeling-backend:3101
      LOG_LEVEL: info
    depends_on:
      - redis-bots
      - labeling-backend
      - payment-backend
    volumes:
      - logs_data:/app/logs/bots
    ports:
      - "${CLIENT_BOT_PORT:-3105}:3000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - labelmint-bots
      - labelmint-backend
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Worker Bot
  worker-bot:
    build:
      context: ./services/bots/worker-bot
      dockerfile: Dockerfile
    container_name: labelmint-worker-bot
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      BOT_TOKEN: ${WORKER_BOT_TOKEN}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-bots:6379
      LABELING_API_URL: http://labeling-backend:3101
      PAYMENT_API_URL: http://payment-backend:3103
      WS_URL: ws://labeling-backend:3101
      LOG_LEVEL: info
    depends_on:
      - redis-bots
      - labeling-backend
      - payment-backend
    volumes:
      - logs_data:/app/logs/bots
    ports:
      - "${WORKER_BOT_PORT:-3106}:3001"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - labelmint-bots
      - labelmint-backend
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # ----------------------------------------
  # Monitoring & Observability Stack
  # ----------------------------------------

  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: labelmint-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - prometheus_data:/prometheus
      - ./infrastructure/monitoring/unified-prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./infrastructure/monitoring/rules:/etc/prometheus/rules:ro
      - ./infrastructure/monitoring/alerts:/etc/prometheus/alerts:ro
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - labelmint-monitoring
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Grafana Visualization
  grafana:
    image: grafana/grafana:10.2.2
    container_name: labelmint-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      GF_SERVER_DOMAIN: ${GRAFANA_DOMAIN:-localhost}
      GF_SERVER_ROOT_URL: http://${GRAFANA_DOMAIN:-localhost}:${GRAFANA_PORT:-3001}/
      GF_SMTP_ENABLED: ${SMTP_ENABLED:-false}
      GF_SMTP_HOST: ${SMTP_HOST}
      GF_SMTP_USER: ${SMTP_USER}
      GF_SMTP_PASSWORD: ${SMTP_PASSWORD}
      GF_SMTP_FROM_ADDRESS: ${SMTP_FROM}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - labelmint-monitoring
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Loki Log Aggregation
  loki:
    image: grafana/loki:2.9.4
    container_name: labelmint-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
      - ./infrastructure/monitoring/loki/loki-config.yaml:/etc/loki/local-config.yaml:ro
    ports:
      - "${LOKI_PORT:-3100}:3100"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - labelmint-monitoring
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Tempo Distributed Tracing
  tempo:
    image: grafana/tempo:2.2.4
    container_name: labelmint-tempo
    restart: unless-stopped
    command: -config.file=/etc/tempo.yaml
    volumes:
      - tempo_data:/tmp/tempo
      - ./infrastructure/monitoring/tempo/tempo-config.yaml:/etc/tempo.yaml:ro
    ports:
      - "${TEMPO_PORT:-3200}:3200"   # tempo query
      - "4317:4317"   # otlp grpc
      - "4318:4318"   # otlp http
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3200/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - labelmint-monitoring
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'

  # AlertManager
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: labelmint-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:${ALERTMANAGER_PORT:-9093}'
      - '--web.enable-admin-api'
    volumes:
      - alertmanager_data:/alertmanager
      - ./infrastructure/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    ports:
      - "${ALERTMANAGER_PORT:-9093}:9093"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - labelmint-monitoring
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Node Exporter System Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: labelmint-node-exporter
    restart: unless-stopped
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
    volumes:
      - /:/host:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc:/host/etc:ro
    networks:
      - labelmint-monitoring
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ----------------------------------------
  # Reverse Proxy & Load Balancer
  # ----------------------------------------

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25.3-alpine
    container_name: labelmint-nginx
    restart: unless-stopped
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
      - logs_data:/var/log/nginx
      - ./cache/nginx:/var/cache/nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - labelmint-frontend
      - labelmint-backend
    depends_on:
      - web
      - api-gateway
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ----------------------------------------
  # Debug Tools (Optional - use profiles)
  # ----------------------------------------

  # Redis Commander (Optional - for debugging)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: labelmint-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD}
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    networks:
      - labelmint-data
    depends_on:
      - redis
    profiles:
      - debug
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # PgAdmin (Optional - for debugging)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: labelmint-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - ./infrastructure/pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - labelmint-data
    depends_on:
      - postgres
    profiles:
      - debug
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'