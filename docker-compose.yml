version: '3.8'

# Network configuration
networks:
  labelmint-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  tempo_data:
    driver: local

services:
  # ==========================================
  # Core Infrastructure Services
  # ==========================================

  # PostgreSQL Database with enhanced configuration
  postgres:
    image: postgres:15-alpine
    container_name: labelmint-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: labelmint
      POSTGRES_USER: labelmint
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql
      - ./scripts/init-extensions.sql:/docker-entrypoint-initdb.d/02-init-extensions.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U labelmint -d labelmint"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - labelmint-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache & Queue with persistence
  redis:
    image: redis:7-alpine
    container_name: labelmint-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    networks:
      - labelmint-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    sysctls:
      - net.core.somaxconn=65535

  # ==========================================
  # Application Services
  # ==========================================

  # Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
      args:
        NEXT_PUBLIC_APP_VERSION: ${APP_VERSION:-local}
        NEXT_PUBLIC_BUILD_DATE: ${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        NEXT_PUBLIC_COMMIT_BRANCH: ${GIT_BRANCH:-local}
    container_name: labelmint-web
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3002
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:3001}
      NEXT_PUBLIC_ENVIRONMENT: ${ENVIRONMENT:-development}
      NEXT_PUBLIC_COMMIT_SHA: ${GIT_SHA:-local}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3002:3002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - labelmint-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Labeling Backend API
  labeling-backend:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: labeling-backend
      args:
        APP_VERSION: ${APP_VERSION:-local}
        BUILD_DATE: ${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        COMMIT_BRANCH: ${GIT_BRANCH:-local}
    container_name: labelmint-labeling-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      DATABASE_URL: postgresql://labelmint:${POSTGRES_PASSWORD}@postgres:5432/labelmint
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      TON_API_KEY: ${TON_API_KEY}
      TON_MERCHANT_ADDRESS: ${TON_MERCHANT_ADDRESS}
      USDT_MASTER_CONTRACT: ${USDT_MASTER_CONTRACT}
      TELEGRAM_BOT_TOKEN_CLIENT: ${TELEGRAM_BOT_TOKEN_CLIENT}
      TELEGRAM_BOT_TOKEN_WORKER: ${TELEGRAM_BOT_TOKEN_WORKER}
      WEB_APP_URL: ${WEB_APP_URL:-http://localhost:3002}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs/backend:/app/logs
    ports:
      - "3001:3001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - labelmint-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Payment Backend API
  payment-backend:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: payment-backend
      args:
        APP_VERSION: ${APP_VERSION:-local}
        BUILD_DATE: ${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        COMMIT_BRANCH: ${GIT_BRANCH:-local}
    container_name: labelmint-payment-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3003
      DATABASE_URL: postgresql://labelmint:${POSTGRES_PASSWORD}@postgres:5432/labelmint
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      TON_RPC_ENDPOINT: ${TON_RPC_ENDPOINT}
      PAYMENT_SECRET_KEY: ${PAYMENT_SECRET_KEY}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3003:3003"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - labelmint-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # Storage Services
  # ==========================================

  # MinIO S3 Storage
  minio:
    image: minio/minio:RELEASE.2024-01-16T16-07-38Z
    container_name: labelmint-minio
    restart: unless-stopped
    command: server /data --console-address ":9001" --quiet
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    volumes:
      - minio_data:/data
      - ./minio/config.json:/root/.minio/config.json:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s
    networks:
      - labelmint-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ==========================================
  # Monitoring & Observability Stack
  # ==========================================

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: labelmint-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - labelmint-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.2.2
    container_name: labelmint-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      GF_SERVER_DOMAIN: ${GRAFANA_DOMAIN:-localhost}
      GF_SERVER_ROOT_URL: http://${GRAFANA_DOMAIN:-localhost}:3000/
      GF_SMTP_ENABLED: ${SMTP_ENABLED:-false}
      GF_SMTP_HOST: ${SMTP_HOST}
      GF_SMTP_USER: ${SMTP_USER}
      GF_SMTP_PASSWORD: ${SMTP_PASSWORD}
      GF_SMTP_FROM_ADDRESS: ${SMTP_FROM}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - labelmint-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Loki for log aggregation
  loki:
    image: grafana/loki:2.9.4
    container_name: labelmint-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
      - ./monitoring/loki/loki-config.yaml:/etc/loki/local-config.yaml:ro
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - labelmint-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Tempo for distributed tracing
  tempo:
    image: grafana/tempo:2.2.4
    container_name: labelmint-tempo
    restart: unless-stopped
    command: -config.file=/etc/tempo.yaml
    volumes:
      - tempo_data:/tmp/tempo
      - ./monitoring/tempo/tempo-config.yaml:/etc/tempo.yaml:ro
    ports:
      - "3200:3200"   # tempo
      - "4317:4317"   # otlp grpc
      - "4318:4318"   # otlp http
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3200/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - labelmint-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Vector for log collection and forwarding
  vector:
    image: timberio/vector:0.35.1-alpine
    container_name: labelmint-vector
    restart: unless-stopped
    volumes:
      - ./monitoring/vector/vector.toml:/etc/vector/vector.toml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    ports:
      - "8686:8686"   # Vector API
    command: vector --config /etc/vector/vector.toml
    networks:
      - labelmint-network
    depends_on:
      - loki
      - tempo
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # ==========================================
  # Reverse Proxy & Load Balancer
  # ==========================================

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25.3-alpine
    container_name: labelmint-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - ./cache/nginx:/var/cache/nginx
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - labelmint-network
    depends_on:
      - web
      - labeling-backend
      - payment-backend
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # Debug Tools (Optional)
  # ==========================================

  # Redis Commander (Optional - for debugging)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: labelmint-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD}
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin}
    ports:
      - "8081:8081"
    networks:
      - labelmint-network
    depends_on:
      - redis
    profiles:
      - debug
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # PgAdmin (Optional - for debugging)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: labelmint-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
    ports:
      - "8080:80"
    networks:
      - labelmint-network
    depends_on:
      - postgres
    profiles:
      - debug
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Portainer for container management (Optional)
  portainer:
    image: portainer/portainer-ce:2.20.2-alpine
    container_name: labelmint-portainer
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "9443:9443"
    networks:
      - labelmint-network
    profiles:
      - debug
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'