version: '3.8'

services:
  # Primary PostgreSQL Database
  postgres-primary:
    image: postgres:16-alpine
    container_name: labelmint-postgres-primary
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-labelmint_prod}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_REPLICATION_USER: ${REPLICATION_USER:-replicator}
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD}
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - postgres_wal_archive:/var/lib/postgresql/wal_archive
      - ./config/postgresql-primary.conf:/etc/postgresql/postgresql.conf
      - ./config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-labelmint_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Read Replica 1
  postgres-replica-1:
    image: postgres:16-alpine
    container_name: labelmint-postgres-replica-1
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-labelmint_prod}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGUSER: ${POSTGRES_USER:-postgres}
      POSTGRES_MASTER_SERVICE: postgres-primary
    volumes:
      - postgres_replica1_data:/var/lib/postgresql/data
      - ./config/postgresql-replica.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5433:5432"
    networks:
      - database
    depends_on:
      postgres-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-labelmint_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Read Replica 2
  postgres-replica-2:
    image: postgres:16-alpine
    container_name: labelmint-postgres-replica-2
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-labelmint_prod}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGUSER: ${POSTGRES_USER:-postgres}
      POSTGRES_MASTER_SERVICE: postgres-primary
    volumes:
      - postgres_replica2_data:/var/lib/postgresql/data
      - ./config/postgresql-replica.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5434:5432"
    networks:
      - database
    depends_on:
      postgres-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-labelmint_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgBouncer Connection Pooler
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: labelmint-pgbouncer
    restart: unless-stopped
    environment:
      DATABASES_HOST: postgres-primary
      DATABASES_PORT: 5432
      DATABASES_USER: ${POSTGRES_USER:-postgres}
      DATABASES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASES_DBNAME: ${POSTGRES_DB:-labelmint_prod}
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 10000
      DEFAULT_POOL_SIZE: 100
      MIN_POOL_SIZE: 20
      ADMIN_USERS: ${POSTGRES_USER:-postgres}
      STATS_USERS: stats
      AUTH_TYPE: md5
    volumes:
      - ./config/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./config/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    ports:
      - "6432:6432"
    networks:
      - database
    depends_on:
      postgres-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 6432 -U stats"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: labelmint-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - database
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Database Backup Service
  postgres-backup:
    image: postgres:16-alpine
    container_name: labelmint-postgres-backup
    restart: unless-stopped
    environment:
      POSTGRES_HOST: postgres-primary
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-labelmint_prod}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${S3_BUCKET:-labelmint-backups}
      S3_REPLICATION_BUCKET: ${S3_REPLICATION_BUCKET:-labelmint-backups-dr}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
      ALERT_EMAIL: ${ALERT_EMAIL}
    volumes:
      - backup_data:/backups
      - ./scripts:/scripts:ro
      - postgres_wal_archive:/var/lib/postgresql/wal_archive:ro
    networks:
      - database
    depends_on:
      postgres-primary:
        condition: service_healthy
    command: >
      sh -c "
        apk add --no-cache aws-cli curl mailutils &&
        crond -f -l 8
      "

  # Database Monitoring Service
  postgres-monitor:
    image: postgres:16-alpine
    container_name: labelmint-postgres-monitor
    restart: unless-stopped
    environment:
      PGHOST: postgres-primary
      PGPORT: 5432
      PGUSER: ${POSTGRES_USER:-postgres}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB:-labelmint_prod}
      ALERT_THRESHOLD: 80
      SLOW_QUERY_THRESHOLD: 1000
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
      ALERT_EMAIL: ${ALERT_EMAIL}
      S3_BUCKET: ${S3_BUCKET:-labelmint-backups}
    volumes:
      - ./scripts:/scripts:ro
      - /var/log/postgres_monitor:/var/log/postgres_monitor
    networks:
      - database
    depends_on:
      postgres-primary:
        condition: service_healthy
    command: >
      sh -c "
        apk add --no-cache aws-cli curl bc &&
        crond -f -l 8
      "

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: labelmint-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@labelmint.it}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - database
    depends_on:
      - pgbouncer

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: labelmint-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - database
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: labelmint-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3001:3000"
    networks:
      - database
    depends_on:
      - prometheus

  # PostgreSQL Exporter for Prometheus
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: labelmint-postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres-primary:5432/${POSTGRES_DB:-labelmint_prod}?sslmode=disable
      PG_EXPORTER_DISABLE_DEFAULT_METRICS: "false"
      PG_EXPORTER_DISABLE_SETTINGS_METRICS: "false"
      PG_EXPORTER_AUTO_DISCOVER_DATABASES: "true"
    networks:
      - database
    depends_on:
      postgres-primary:
        condition: service_healthy
    ports:
      - "9187:9187"

  # Redis Exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: labelmint-redis-exporter
    restart: unless-stopped
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - database
    depends_on:
      - redis
    ports:
      - "9121:9121"

  # HAProxy for load balancing
  haproxy:
    image: haproxy:2.8-alpine
    container_name: labelmint-haproxy
    restart: unless-stopped
    volumes:
      - ./config/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    ports:
      - "5400:5400"
    networks:
      - database
    depends_on:
      - postgres-primary
      - postgres-replica-1
      - postgres-replica-2

volumes:
  postgres_primary_data:
    driver: local
  postgres_replica1_data:
    driver: local
  postgres_replica2_data:
    driver: local
  postgres_wal_archive:
    driver: local
  redis_data:
    driver: local
  backup_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  database:
    driver: bridge