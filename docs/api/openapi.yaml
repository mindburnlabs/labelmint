openapi: 3.0.3
info:
  title: Telegram Labeling Platform API
  description: |
    Enterprise API for programmatic dataset labeling with AI-powered tasks, quality control, and real-time webhooks.

    ## Features
    - Multi-format labeling (images, text, audio)
    - AI-powered task assistance
    - Quality control and verification
    - Real-time webhook notifications
    - Micropayment system integration
    - Rate limiting and analytics

    ## Authentication
    The API uses triple authentication for security:
    1. API Key (X-API-Key header)
    2. Timestamp (X-Timestamp header, 5-minute window)
    3. HMAC-SHA256 Signature (X-Signature header)
  version: 1.2.0
  contact:
    name: API Support
    email: api-support@labelmint.it
    url: https://labelmint.it/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://labelmint.it/terms

servers:
  - url: https://api.labelmint.it/v1
    description: Production server
  - url: https://staging-api.labelmint.it/v1
    description: Staging server
  - url: http://localhost:3001/api/v1
    description: Development server

tags:
  - name: Tasks
    description: Task management and operations
  - name: Projects
    description: Project configuration and management
  - name: API Keys
    description: API key management
  - name: Payments
    description: Payment processing and billing
  - name: Webhooks
    description: Webhook configuration and management
  - name: Analytics
    description: Usage analytics and reporting
  - name: AI Tasks
    description: AI-powered task automation

paths:
  /tasks:
    get:
      tags:
        - Tasks
      summary: List tasks
      description: Retrieve a paginated list of tasks with optional filtering
      operationId: listTasks
      parameters:
        - name: project_id
          in: query
          description: Filter by project ID
          schema:
            type: integer
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
            enum: [pending, in_progress, completed, rejected]
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of items to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'
      security:
        - ApiKeyAuth: []
          TimestampAuth: []
          SignatureAuth: []

    post:
      tags:
        - Tasks
      summary: Create task
      description: Create a new labeling task
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  task:
                    $ref: '#/components/schemas/Task'
                  message:
                    type: string
                    example: "Task created successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'
      security:
        - ApiKeyAuth: []
          TimestampAuth: []
          SignatureAuth: []

  /tasks/{taskId}:
    get:
      tags:
        - Tasks
      summary: Get task
      description: Retrieve details of a specific task
      operationId: getTask
      parameters:
        - name: taskId
          in: path
          required: true
          description: Task identifier
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  task:
                    $ref: '#/components/schemas/TaskWithResult'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - ApiKeyAuth: []
          TimestampAuth: []
          SignatureAuth: []

    delete:
      tags:
        - Tasks
      summary: Delete task
      description: Delete a specific task (only if not started)
      operationId: deleteTask
      parameters:
        - name: taskId
          in: path
          required: true
          description: Task identifier
          schema:
            type: string
      responses:
        '204':
          description: Task deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Cannot delete task in progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - ApiKeyAuth: []
          TimestampAuth: []
          SignatureAuth: []

  /tasks/batch:
    post:
      tags:
        - Tasks
      summary: Create batch tasks
      description: Create multiple tasks in a single request
      operationId: createBatchTasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: integer
                  description: Project ID
                tasks:
                  type: array
                  items:
                    $ref: '#/components/schemas/TaskData'
                  minItems: 1
                  maxItems: 1000
                webhook_url:
                  type: string
                  format: uri
                  description: Optional webhook for batch completion
              required:
                - project_id
                - tasks
      responses:
        '201':
          description: Batch tasks created
          content:
            application/json:
              schema:
                type: object
                properties:
                  batch_id:
                    type: string
                    description: Batch identifier
                  task_count:
                    type: integer
                    description: Number of tasks created
                  estimated_cost:
                    type: number
                    description: Estimated cost in USD
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '413':
          description: Payload too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - ApiKeyAuth: []
          TimestampAuth: []
          SignatureAuth: []

  /projects:
    get:
      tags:
        - Projects
      summary: List projects
      description: Retrieve all projects for your account
      operationId: listProjects
      parameters:
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
            enum: [pending, active, completed, paused, archived]
        - name: type
          in: query
          description: Filter by type
          schema:
            type: string
            enum: [image, text, audio]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - ApiKeyAuth: []
          TimestampAuth: []
          SignatureAuth: []

    post:
      tags:
        - Projects
      summary: Create project
      description: Create a new labeling project
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    $ref: '#/components/schemas/Project'
                  api_keys:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiKey'
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - ApiKeyAuth: []
          TimestampAuth: []
          SignatureAuth: []

  /projects/{projectId}:
    get:
      tags:
        - Projects
      summary: Get project
      description: Retrieve project details
      operationId: getProject
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    $ref: '#/components/schemas/ProjectWithStats'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - ApiKeyAuth: []
          TimestampAuth: []
          SignatureAuth: []

    put:
      tags:
        - Projects
      summary: Update project
      description: Update project configuration
      operationId: updateProject
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    $ref: '#/components/schemas/Project'
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - ApiKeyAuth: []
          TimestampAuth: []
          SignatureAuth: []

    delete:
      tags:
        - Projects
      summary: Delete project
      description: Delete a project (only if no active tasks)
      operationId: deleteProject
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: integer
      responses:
        '204':
          description: Project deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Cannot delete project with active tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - ApiKeyAuth: []
          TimestampAuth: []
          SignatureAuth: []

  /aiTasks:
    post:
      tags:
        - AI Tasks
      summary: Create AI-powered task
      description: Create a task with AI assistance for pre-labeling
      operationId: createAITask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: integer
                  description: Project ID
                data:
                  $ref: '#/components/schemas/TaskData'
                ai_config:
                  type: object
                  properties:
                    model:
                      type: string
                      enum: [gpt-4-vision, claude-3, gemini-pro-vision]
                      description: AI model to use
                    confidence_threshold:
                      type: number
                      minimum: 0
                      maximum: 1
                      default: 0.8
                      description: Minimum confidence for auto-labeling
                    enable_human_verification:
                      type: boolean
                      default: true
                      description: Require human verification
                  required:
                    - model
                priority:
                  type: string
                  enum: [low, normal, high, urgent]
                  default: normal
              required:
                - project_id
                - data
      responses:
        '201':
          description: AI task created
          content:
            application/json:
              schema:
                type: object
                properties:
                  task:
                    $ref: '#/components/schemas/AITask'
                  estimated_savings:
                    type: number
                    description: Estimated cost savings in %
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - ApiKeyAuth: []
          TimestampAuth: []
          SignatureAuth: []

  /keys:
    get:
      tags:
        - API Keys
      summary: List API keys
      description: Retrieve all API keys for your account
      operationId: listApiKeys
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiKey'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - ApiKeyAuth: []
          TimestampAuth: []
          SignatureAuth: []

    post:
      tags:
        - API Keys
      summary: Create API key
      description: Create a new API key
      operationId: createApiKey
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                  description: API key name
                permissions:
                  type: array
                  items:
                    type: string
                    enum: [read, write, delete, admin]
                  description: Key permissions
                rate_limit:
                  $ref: '#/components/schemas/RateLimit'
                description:
                  type: string
                  maxLength: 500
                  description: Key description
                allowed_ips:
                  type: array
                  items:
                    type: string
                    format: ipv4
                  description: Allowed IP addresses
              required:
                - name
                - permissions
      responses:
        '201':
          description: API key created
          content:
            application/json:
              schema:
                type: object
                properties:
                  key:
                    $ref: '#/components/schemas/ApiKey'
                  message:
                    type: string
                    example: "API key created successfully. Save the key securely as it won't be shown again."
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - ApiKeyAuth: []
          TimestampAuth: []
          SignatureAuth: []

  /keys/{keyId}:
    delete:
      tags:
        - API Keys
      summary: Delete API key
      description: Delete an API key
      operationId: deleteApiKey
      parameters:
        - name: keyId
          in: path
          required: true
          description: API key ID
          schema:
            type: integer
      responses:
        '204':
          description: API key deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - ApiKeyAuth: []
          TimestampAuth: []
          SignatureAuth: []

  /analytics:
    get:
      tags:
        - Analytics
      summary: Get analytics
      description: Retrieve usage analytics and statistics
      operationId: getAnalytics
      parameters:
        - name: start_date
          in: query
          description: Start date (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: end_date
          in: query
          description: End date (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: project_id
          in: query
          description: Filter by project ID
          schema:
            type: integer
        - name: metrics
          in: query
          description: Specific metrics to retrieve
          schema:
            type: array
            items:
              type: string
              enum: [tasks_completed, accuracy, cost, time_spent, worker_performance]
      responses:
        '200':
          description: Analytics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Analytics'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - ApiKeyAuth: []
          TimestampAuth: []
          SignatureAuth: []

  /webhooks:
    post:
      tags:
        - Webhooks
      summary: Configure webhook
      description: Configure or update webhook URLs
      operationId: configureWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                  description: Webhook URL
                events:
                  type: array
                  items:
                    type: string
                    enum: [task.completed, task.rejected, project.completed, payment.processed]
                  description: Events to subscribe to
                secret:
                  type: string
                  minLength: 16
                  description: Webhook secret for signature verification
                active:
                  type: boolean
                  default: true
                  description: Webhook status
              required:
                - url
                - events
                - secret
      responses:
        '200':
          description: Webhook configured
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhook:
                    $ref: '#/components/schemas/Webhook'
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - ApiKeyAuth: []
          TimestampAuth: []
          SignatureAuth: []

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication
    TimestampAuth:
      type: apiKey
      in: header
      name: X-Timestamp
      description: Unix timestamp (5-minute window)
    SignatureAuth:
      type: apiKey
      in: header
      name: X-Signature
      description: HMAC-SHA256 signature

  schemas:
    Task:
      type: object
      properties:
        id:
          type: string
          description: Task unique identifier
        project_id:
          type: integer
          description: Project ID
        status:
          type: string
          enum: [pending, in_progress, completed, rejected, expired]
          description: Task status
        data:
          $ref: '#/components/schemas/TaskData'
        priority:
          type: string
          enum: [low, normal, high, urgent]
          default: normal
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        estimated_cost:
          type: number
          description: Estimated cost in USD
      required:
        - id
        - project_id
        - status
        - data

    TaskData:
      oneOf:
        - type: object
          title: Image Task
          properties:
            type:
              type: string
              const: image
            image_url:
              type: string
              format: uri
              description: Image URL
            metadata:
              type: object
              description: Additional image metadata
          required:
            - type
            - image_url
        - type: object
          title: Text Task
          properties:
            type:
              type: string
              const: text
            text:
              type: string
              minLength: 1
              maxLength: 10000
              description: Text to label
            language:
              type: string
              description: Text language (ISO 639-1)
            metadata:
              type: object
          required:
            - type
            - text
        - type: object
          title: Audio Task
          properties:
            type:
              type: string
              const: audio
            audio_url:
              type: string
              format: uri
              description: Audio file URL
            duration:
              type: number
              description: Audio duration in seconds
            transcription:
              type: string
              description: Optional transcription
            metadata:
              type: object
          required:
            - type
            - audio_url

    TaskResult:
      type: object
      properties:
        task_id:
          type: string
        label:
          type: string
          description: Assigned label
        confidence:
          type: number
          minimum: 0
          maximum: 1
          description: Label confidence score
        worker_id:
          type: integer
        time_spent:
          type: integer
          description: Time spent in seconds
        annotations:
          type: object
          description: Additional annotations
        verified:
          type: boolean
          description: Whether result was verified
        completed_at:
          type: string
          format: date-time

    Project:
      type: object
      properties:
        id:
          type: integer
          description: Project ID
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Project name
        description:
          type: string
          maxLength: 1000
          description: Project description
        type:
          type: string
          enum: [image, text, audio]
          description: Data type
        categories:
          type: array
          items:
            type: string
          minItems: 2
          maxItems: 100
          description: Label categories
        status:
          type: string
          enum: [pending, active, completed, paused, archived]
          description: Project status
        config:
          $ref: '#/components/schemas/ProjectConfig'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - type
        - categories
        - status

    ProjectConfig:
      type: object
      properties:
        instructions:
          type: string
          maxLength: 5000
          description: Labeling instructions
        guidelines:
          type: array
          items:
            type: string
          description: Labeling guidelines
        required_accuracy:
          type: number
          minimum: 0
          maximum: 1
          default: 0.9
          description: Minimum required accuracy
        quality_check:
          type: object
          properties:
            enabled:
              type: boolean
              default: true
            sample_rate:
              type: number
              minimum: 0
              maximum: 1
              default: 0.1
              description: Fraction of tasks to verify
          required:
            - enabled
        payment:
          $ref: '#/components/schemas/PaymentConfig'
        webhooks:
          $ref: '#/components/schemas/WebhookConfig'

    PaymentConfig:
      type: object
      properties:
        per_label:
          type: number
          minimum: 0.01
          description: Payment per label in USD
        bonus_accuracy:
          type: object
          properties:
            threshold:
              type: number
              minimum: 0
              maximum: 1
            bonus:
              type: number
              description: Bonus amount in USD
          description: Accuracy bonus configuration
        currency:
          type: string
          enum: [USD, USDT, TON]
          default: USD

    WebhookConfig:
      type: object
      properties:
        task_completed:
          type: string
          format: uri
        project_completed:
          type: string
          format: uri
        task_rejected:
          type: string
          format: uri

    ApiKey:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        key:
          type: string
          description: API key value (only shown on creation)
        permissions:
          type: array
          items:
            type: string
        rate_limit:
          $ref: '#/components/schemas/RateLimit'
        description:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        last_used:
          type: string
          format: date-time
        request_count:
          type: integer
          description: Total requests made

    RateLimit:
      type: object
      properties:
        requests:
          type: integer
          minimum: 1
          description: Number of requests
        window:
          type: integer
          minimum: 1
          description: Time window in minutes
      required:
        - requests
        - window

    Webhook:
      type: object
      properties:
        id:
          type: integer
        url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string
        secret:
          type: string
        active:
          type: boolean
        last_triggered:
          type: string
          format: date-time

    Analytics:
      type: object
      properties:
        period:
          $ref: '#/components/schemas/DateRange'
        summary:
          type: object
          properties:
            total_tasks:
              type: integer
            completed_tasks:
              type: integer
            average_accuracy:
              type: number
            total_cost:
              type: number
            average_time_per_task:
              type: number
        breakdown:
          type: object
          properties:
            by_date:
              type: array
              items:
                $ref: '#/components/schemas/DailyStats'
            by_project:
              type: array
              items:
                $ref: '#/components/schemas/ProjectStats'
            by_category:
              type: array
              items:
                $ref: '#/components/schemas/CategoryStats'

    Pagination:
      type: object
      properties:
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer
        has_more:
          type: boolean

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details
        request_id:
          type: string
          description: Request ID for tracking
      required:
        - error
        - code

    CreateTaskRequest:
      type: object
      required:
        - project_id
        - data
      properties:
        project_id:
          type: integer
        data:
          $ref: '#/components/schemas/TaskData'
        priority:
          type: string
          enum: [low, normal, high, urgent]
          default: normal
        webhook_url:
          type: string
          format: uri
        expires_in:
          type: integer
          minimum: 300
          maximum: 604800
          default: 86400
          description: Expiration time in seconds

    CreateProjectRequest:
      type: object
      required:
        - name
        - type
        - categories
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 1000
        type:
          type: string
          enum: [image, text, audio]
        categories:
          type: array
          items:
            type: string
          minItems: 2
          maxItems: 100
        config:
          $ref: '#/components/schemas/ProjectConfig'
        webhooks:
          $ref: '#/components/schemas/WebhookConfig'

    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 1000
        status:
          type: string
          enum: [pending, active, completed, paused, archived]
        categories:
          type: array
          items:
            type: string
          minItems: 2
          maxItems: 100
        config:
          $ref: '#/components/schemas/ProjectConfig'
        webhooks:
          $ref: '#/components/schemas/WebhookConfig'

    AITask:
      allOf:
        - $ref: '#/components/schemas/Task'
        - type: object
          properties:
            ai_model:
              type: string
            ai_confidence:
              type: number
            ai_prelabel:
              type: string
            human_verified:
              type: boolean

    TaskWithResult:
      allOf:
        - $ref: '#/components/schemas/Task'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/TaskResult'

    ProjectWithStats:
      allOf:
        - $ref: '#/components/schemas/Project'
        - type: object
          properties:
            statistics:
              type: object
              properties:
                total_tasks:
                  type: integer
                completed_tasks:
                  type: integer
                pending_tasks:
                  type: integer
                average_accuracy:
                  type: number
                total_spent:
                  type: number

    DateRange:
      type: object
      properties:
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time

    DailyStats:
      type: object
      properties:
        date:
          type: string
          format: date
        tasks_completed:
          type: integer
        accuracy:
          type: number
        cost:
          type: number

    ProjectStats:
      type: object
      properties:
        project_id:
          type: integer
        project_name:
          type: string
        tasks_completed:
          type: integer
        accuracy:
          type: number
        cost:
          type: number

    CategoryStats:
      type: object
      properties:
        category:
          type: string
        count:
          type: integer
        accuracy:
          type: number

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Invalid request parameters"
            code: "INVALID_REQUEST"
            details:
              field: "categories"
              message: "At least 2 categories required"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Authentication failed"
            code: "UNAUTHORIZED"
            request_id: "req_123456789"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Task not found"
            code: "NOT_FOUND"
            request_id: "req_123456789"

    RateLimited:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Rate limit exceeded"
            code: "RATE_LIMITED"
            details:
              limit: 1000
              window: 3600
              reset_at: 1705123200
      headers:
        X-RateLimit-Limit:
          description: Rate limit
          schema:
            type: integer
        X-RateLimit-Remaining:
          description: Remaining requests
          schema:
            type: integer
        X-RateLimit-Reset:
          description: Rate limit reset timestamp
          schema:
            type: integer

# External Documentation
externalDocs:
  description: Complete documentation and guides
  url: https://docs.labelmint.it