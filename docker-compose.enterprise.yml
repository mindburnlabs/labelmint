version: '3.8'

services:
  # Enterprise API Service
  enterprise-api:
    build:
      context: ./services/enterprise-api
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/labelmint_enterprise
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - SAML_ISSUER=${SAML_ISSUER}
      - SAML_ACS_URL=${SAML_ACS_URL}
      - BASE_URL=${BASE_URL}
      - FRONTEND_URL=${FRONTEND_URL}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/enterprise-api/uploads:/app/uploads
    restart: unless-stopped

  # Workflow Engine Service
  workflow-engine:
    build:
      context: ./services/workflow-engine
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/labelmint_enterprise
      - REDIS_URL=redis://redis:6379
      - MQ_CONNECTION_STRING=amqp://rabbitmq:5672
    depends_on:
      - postgres
      - redis
      - rabbitmq
    restart: unless-stopped

  # Collaboration Service
  collaboration-service:
    build:
      context: ./services/collaboration-service
      dockerfile: Dockerfile
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/labelmint_enterprise
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Analytics Engine
  analytics-engine:
    build:
      context: ./services/analytics-engine
      dockerfile: Dockerfile
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/labelmint_enterprise
      - REDIS_URL=redis://redis:6379
      - PYTHON_ML_SERVICE_URL=http://python-ml-service:8000
    depends_on:
      - postgres
      - redis
      - python-ml-service
    restart: unless-stopped

  # Python ML Service for Analytics
  python-ml-service:
    build:
      context: ./services/analytics-engine/ml
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - MODEL_PATH=/app/models
    volumes:
      - ml_models:/app/models
    restart: unless-stopped

  # White Label Service
  white-label-service:
    build:
      context: ./services/white-label-service
      dockerfile: Dockerfile
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/labelmint_enterprise
      - REDIS_URL=redis://redis:6379
      - CDN_BASE_URL=${CDN_BASE_URL}
      - ASSET_STORAGE_URL=${ASSET_STORAGE_URL}
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=labelmint_enterprise
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-admin123}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./services/white-label-service/public:/var/www/white-label
    depends_on:
      - enterprise-api
      - workflow-engine
      - collaboration-service
      - analytics-engine
      - white-label-service
    restart: unless-stopped

  # Elasticsearch for Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped

  # Kibana for Analytics Dashboard
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  elasticsearch_data:
  ml_models:

networks:
  default:
    name: labelmint-enterprise
    driver: bridge