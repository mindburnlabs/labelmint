name: Quality Gates and Testing Automation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '9.15.1'

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: ESLint Analysis
        run: pnpm run lint --format=json --output-file=eslint-report.json
        continue-on-error: true

      - name: Prettier Check
        run: pnpm run format:check
        continue-on-error: true

      - name: TypeScript Type Checking
        run: pnpm run type-check
        continue-on-error: true

      - name: Security Audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: Upload Quality Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: quality-reports
          path: |
            eslint-report.json
            package.json

  # Unit Testing
  unit-tests:
    name: Unit Testing
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Unit Tests with Coverage
        run: pnpm run test:unit:ci
        continue-on-error: true

      - name: Generate Coverage Report
        run: pnpm run test:coverage --reporter=json-summary --reporter=text --reporter=lcov

      - name: Coverage Threshold Check
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Coverage $COVERAGE% is below threshold 80%"
            exit 1
          fi
          echo "Coverage $COVERAGE% meets threshold"

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-coverage
          path: |
            coverage/
            test-results/

      - name: Comment Coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            try {
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const lines = coverage.total.lines.pct;
              const functions = coverage.total.functions.pct;
              const branches = coverage.total.branches.pct;
              const statements = coverage.total.statements.pct;

              const comment = `## 📊 Test Coverage Report

              | Metric | Coverage | Status |
              |--------|----------|---------|
              | Lines | ${lines.toFixed(1)}% | ${lines >= 80 ? '✅' : '❌'} |
              | Functions | ${functions.toFixed(1)}% | ${functions >= 80 ? '✅' : '❌'} |
              | Branches | ${branches.toFixed(1)}% | ${branches >= 75 ? '✅' : '❌'} |
              | Statements | ${statements.toFixed(1)}% | ${statements >= 80 ? '✅' : '❌'} |

              ${lines >= 80 && functions >= 80 && branches >= 75 && statements >= 80 ?
                '🎉 **Coverage requirements met!**' :
                '⚠️ **Coverage below thresholds - needs improvement**'}
              `;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not read coverage report:', error.message);
            }

  # Integration Testing
  integration-tests:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Test Database
        run: |
          pnpm run db:start
          sleep 10
          pnpm run db:migrate

      - name: Run Integration Tests
        run: pnpm run test:integration:ci
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Upload Integration Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: test-results/

  # E2E Testing
  e2e-tests:
    name: End-to-End Testing
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps

      - name: Build Application
        run: pnpm run build

      - name: Start Application
        run: |
          pnpm run dev &
          sleep 30

      - name: Run E2E Tests
        run: pnpm run test:e2e:ci
        env:
          BASE_URL: http://localhost:3000

      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            playwright-report/
            test-results/

      - name: Upload E2E Videos
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-videos
          path: test-results/

  # Security Testing
  security-testing:
    name: Security Testing
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Security Tests
        run: pnpm run test:security
        continue-on-error: true

      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: typescript

      - name: Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten

      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            security-reports/
            semgrep-reports/

  # Performance Testing
  performance-testing:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Application
        run: pnpm run build

      - name: Start Application
        run: |
          pnpm run dev &
          sleep 30

      - name: Run Performance Tests
        run: pnpm run test:performance
        env:
          BASE_URL: http://localhost:3000

      - name: Upload Performance Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-reports
          path: performance-reports/

  # Smart Contract Testing
  contract-testing:
    name: Smart Contract Testing
    runs-on: ubuntu-latest
    needs: security-testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Contract Tests
        run: pnpm run test:contracts
        continue-on-error: true

      - name: Contract Security Audit
        run: |
          if [ -d "contracts" ]; then
            npx slither contracts/ --json slither-report.json || true
          fi

      - name: Upload Contract Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: contract-reports
          path: |
            slither-report.json
            contract-test-results/

  # Quality Gate Evaluation
  quality-gate:
    name: Quality Gate Evaluation
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security-testing]
    if: always()
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v3

      - name: Evaluate Quality Gates
        run: |
          echo "## 🚦 Quality Gate Evaluation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Unit Test Quality Gate
          if [ -f "unit-coverage/coverage-summary.json" ]; then
            LINES_COVERAGE=$(cat unit-coverage/coverage-summary.json | jq -r '.total.lines.pct')
            if (( $(echo "$LINES_COVERAGE >= 80" | bc -l) )); then
              echo "✅ Unit Test Coverage: ${LINES_COVERAGE}% (PASS)" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Unit Test Coverage: ${LINES_COVERAGE}% (FAIL - Below 80%)" >> $GITHUB_STEP_SUMMARY
              UNIT_TESTS_PASS=false
            fi
          else
            echo "⚠️ Unit Test Coverage: No report found" >> $GITHUB_STEP_SUMMARY
            UNIT_TESTS_PASS=false
          fi

          # Integration Test Quality Gate
          if [ -d "integration-test-results" ]; then
            INTEGRATION_TESTS=$(find integration-test-results -name "*.json" | wc -l)
            if [ $INTEGRATION_TESTS -gt 0 ]; then
              echo "✅ Integration Tests: $INTEGRATION_TESTS tests executed (PASS)" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ Integration Tests: No tests found" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          # E2E Test Quality Gate
          if [ -d "e2e-test-results" ]; then
            E2E_TESTS=$(find e2e-test-results -name "*.json" | wc -l)
            if [ $E2E_TESTS -gt 0 ]; then
              echo "✅ E2E Tests: $E2E_TESTS tests executed (PASS)" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ E2E Tests: No tests found" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          # Security Test Quality Gate
          if [ -d "security-reports" ]; then
            SECURITY_ISSUES=$(find security-reports -name "*.json" | wc -l)
            if [ $SECURITY_ISSUES -eq 0 ]; then
              echo "✅ Security Tests: No critical issues found (PASS)" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ Security Tests: $SECURITY_ISSUES issues found" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Overall Quality Status" >> $GITHUB_STEP_SUMMARY

          # Final evaluation
          if [ "${UNIT_TESTS_PASS:-true}" = "true" ]; then
            echo "🎉 **ALL QUALITY GATES PASSED**" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "❌ **QUALITY GATES FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "Please address the failing checks before merging." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security-testing, performance-testing, contract-testing]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Test Results
        uses: actions/download-artifact@v3

      - name: Generate Test Summary
        run: |
          echo "# 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Generated on: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Unit Tests Summary
          if [ -f "unit-coverage/coverage-summary.json" ]; then
            echo "## 📊 Unit Tests" >> $GITHUB_STEP_SUMMARY
            COVERAGE=$(cat unit-coverage/coverage-summary.json | jq -r '.total.lines.pct')
            echo "- **Coverage**: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: $([ $(echo "$COVERAGE >= 80" | bc -l) -eq 1 ] && echo "✅ PASS" || echo "❌ FAIL")" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Integration Tests Summary
          if [ -d "integration-test-results" ]; then
            echo "## 🔗 Integration Tests" >> $GITHUB_STEP_SUMMARY
            INTEGRATION_COUNT=$(find integration-test-results -name "*.json" | wc -l)
            echo "- **Tests Executed**: $INTEGRATION_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ✅ COMPLETED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # E2E Tests Summary
          if [ -d "e2e-test-results" ]; then
            echo "## 🎭 End-to-End Tests" >> $GITHUB_STEP_SUMMARY
            E2E_COUNT=$(find e2e-test-results -name "*.json" | wc -l)
            echo "- **Tests Executed**: $E2E_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ✅ COMPLETED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Security Tests Summary
          if [ -d "security-reports" ]; then
            echo "## 🔒 Security Tests" >> $GITHUB_STEP_SUMMARY
            SECURITY_COUNT=$(find security-reports -name "*.json" | wc -l)
            echo "- **Security Scans**: $SECURITY_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ✅ COMPLETED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Performance Tests Summary
          if [ -d "performance-reports" ]; then
            echo "## ⚡ Performance Tests" >> $GITHUB_STEP_SUMMARY
            PERF_COUNT=$(find performance-reports -name "*.json" | wc -l)
            echo "- **Performance Tests**: $PERF_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ✅ COMPLETED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Contract Tests Summary
          if [ -d "contract-reports" ]; then
            echo "## 📜 Smart Contract Tests" >> $GITHUB_STEP_SUMMARY
            CONTRACT_COUNT=$(find contract-reports -name "*.json" | wc -l)
            echo "- **Contract Tests**: $CONTRACT_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ✅ COMPLETED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*This summary was automatically generated by the CI/CD pipeline*" >> $GITHUB_STEP_SUMMARY