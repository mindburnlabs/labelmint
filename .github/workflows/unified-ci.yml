# Unified CI/CD Pipeline for LabelMint
# ====================================
# This workflow handles all CI/CD operations in a single, optimized pipeline

name: Unified CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      deploy:
        description: 'Deploy to target environment'
        required: false
        default: false
        type: boolean
      run_tests:
        description: 'Run tests'
        required: false
        default: true
        type: boolean

# Environment variables
env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9.15.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ runner.os }}-node-${{ env.NODE_VERSION }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        run: corepack enable pnpm && pnpm --version

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm run type-check

      - name: Lint code
        run: pnpm run lint

      - name: Format check
        run: pnpm run format:check

      - name: Security audit
        run: pnpm audit --audit-level moderate

      - name: Dependency check
        run: pnpm run check-deps

  # Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        test-type: [unit, integration, frontend]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        run: corepack enable pnpm

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.quality.outputs.cache-key }}
          restore-keys: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Start test infrastructure
        run: |
          docker-compose -f docker-compose.unified.yml -f config/docker/testing.yml up -d
          sleep 30

      - name: Run ${{ matrix.test-type }} tests
        run: pnpm run test:${{ matrix.test-type }}

      - name: Upload coverage reports
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: ${{ matrix.test-type }}

      - name: Stop test infrastructure
        if: always()
        run: docker-compose -f docker-compose.unified.yml -f config/docker/testing.yml down -v

  # Build
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        run: corepack enable pnpm

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.quality.outputs.cache-key }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            apps/*/dist
            apps/*/build
            packages/*/dist
            services/*/dist
          retention-days: 7

  # Container Security Scanning
  security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy
  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: [quality, test, build, security-scan]
    if: |
      github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true' ||
      github.ref == 'refs/heads/main' ||
      startsWith(github.ref, 'refs/tags/v')
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        run: corepack enable pnpm

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Set environment variables
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/heads/main ]]; then
            echo "BRANCH=main" >> $GITHUB_ENV
          else
            echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          fi

      - name: Deploy to ${{ github.event.inputs.environment || 'staging' }}
        run: |
          ./scripts/deployment/deploy.sh ${{ github.event.inputs.environment || 'staging' }} \
            ${TAG:+--tag $TAG} \
            ${BRANCH:+--branch $BRANCH} \
            --verbose

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event.inputs.environment == 'staging' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: corepack enable pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run performance tests
        run: pnpm run test:performance
        env:
          BASE_URL: ${{ steps.deploy.outputs.url }}

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results/

  # Notifications
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality, test, build, deploy, performance]
    if: always()

    steps:
      - name: Notify on success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          # Add Slack/Discord notification here

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Pipeline failed!"
          # Add Slack/Discord notification here