events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=2r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;

    # Upstream servers
    upstream web {
        server web:3000;
    }

    upstream api {
        server backend:3001;
    }

    upstream miniapp {
        server mini-app:3002;
    }

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name labelmint.mindburn.org api.labelmint.mindburn.org app.labelmint.mindburn.org workers.labelmint.mindburn.org;

        # Let's Encrypt challenge
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # Main domain - Web Dashboard
    server {
        listen 443 ssl http2;
        server_name labelmint.mindburn.org;

        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # Next.js routes
        location / {
            proxy_pass http://web;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # Static assets caching
        location /_next/static/ {
            proxy_pass http://web;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Favicon and robots.txt
        location ~* \.(ico|png|svg|jpg|jpeg|gif|css|js|woff|woff2|ttf|eot)$ {
            proxy_pass http://web;
            add_header Cache-Control "public, max-age=31536000";
        }
    }

    # API server
    server {
        listen 443 ssl http2;
        server_name api.labelmint.mindburn.org;

        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        # API rate limiting
        limit_req zone=api burst=20 nodelay;

        # CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type "text/plain charset=UTF-8";
            add_header Content-Length 0;
            return 204;
        }

        # API routes
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://api;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # Upload endpoint with stricter rate limiting
        location /api/projects/*/upload {
            limit_req zone=upload burst=5 nodelay;
            proxy_pass http://api;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_request_buffering off;
        }

        # Auth endpoint with rate limiting
        location /api/auth/ {
            limit_req zone=login burst=5 nodelay;
            proxy_pass http://api;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WebSocket for real-time notifications
        location /socket.io/ {
            proxy_pass http://api;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check
        location /health {
            proxy_pass http://api;
            access_log off;
        }
    }

    # Telegram Mini App - Client version
    server {
        listen 443 ssl http2;
        server_name app.labelmint.mindburn.org;

        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        # Security headers for Mini App
        add_header X-Frame-Options "ALLOW-FROM https://t.me" always;
        add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' telegram.org *.telegram.org" always;

        location / {
            proxy_pass http://miniapp;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # Special headers for Telegram
        location ~* ^/telegram-web-app.js$ {
            add_header Access-Control-Allow-Origin "*";
            proxy_pass http://miniapp;
        }
    }

    # Telegram Mini App - Worker version
    server {
        listen 443 ssl http2;
        server_name workers.labelmint.mindburn.org;

        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        # Security headers for Mini App
        add_header X-Frame-Options "ALLOW-FROM https://t.me" always;
        add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' telegram.org *.telegram.org" always;

        location / {
            proxy_pass http://miniapp;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }
    }

    # Server stats page (optional)
    server {
        listen 443 ssl http2;
        server_name stats.labelmint.mindburn.org;

        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        # Basic auth for stats
        auth_basic "Restricted";
        auth_basic_user_file /etc/nginx/.htpasswd;

        # Nginx status
        location /nginx_status {
            stub_status on;
            access_log off;
        }

        # Simple stats page
        location / {
            return 200 '<!DOCTYPE html>
<html>
<head>
    <title>LabelMint Server Stats</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .stat { margin: 20px 0; }
        .ok { color: green; }
        .error { color: red; }
    </style>
</head>
<body>
    <h1>LabelMint Server Status</h1>
    <div class="stat" id="services">Checking services...</div>
    <div class="stat" id="uptime">Uptime: <span></span></div>
    <script>
        // Check service health
        fetch("/health")
            .then(r => r.json())
            .then(d => {
                document.getElementById("services").innerHTML = "<span class=\\"ok\\">All services operational</span>";
            })
            .catch(e => {
                document.getElementById("services").innerHTML = "<span class=\\"error\\">Service issues detected</span>";
            });

        // Show uptime
        document.querySelector("#uptime span").textContent = new Date().toLocaleString();
        setInterval(() => {
            document.querySelector("#uptime span").textContent = new Date().toLocaleString();
        }, 1000);
    </script>
</body>
</html>';
            add_header Content-Type text/html;
        }
    }

    # Block bad bots
    if ($http_user_agent ~* (semrush|ahrefs|mj12bot|dotbot)) {
        return 444;
    }

    # Block suspicious requests
    if ($request_uri ~* \.(aspx|php|jsp|cgi)) {
        return 444;
    }

    # Include additional configurations
    include /etc/nginx/conf.d/*.conf;
}