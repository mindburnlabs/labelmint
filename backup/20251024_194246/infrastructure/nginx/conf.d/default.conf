# Default site configuration for LabelMint
# Redirects HTTP to HTTPS and handles main domain

server {
    listen 80;
    listen [::]:80;
    server_name localhost labelmint.local www.labelmint.local;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

# Main HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name localhost labelmint.local www.labelmint.local;

    # SSL certificate (replace with actual certificates)
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' wss: https:; frame-ancestors 'none';" always;

    # Rate limiting for API endpoints
    limit_req zone=api_limit burst=20 nodelay;

    # Connection limits
    limit_conn zone=conn_limit_per_ip burst=10;

    # Static file serving
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|webp|woff|woff2|ttf|eot|otf)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
        gzip_static on;
        proxy_pass http://web_backend;
        proxy_cache_valid 200 1y;
        proxy_cache_use_stale error timeout updating;
    }

    # Main web application
    location / {
        proxy_pass http://web_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_forwarded_for;
        proxy_set_header X-Forwarded-Proto $proxy_forwarded_proto;
        proxy_set_header X-Request-ID $request_id;

        proxy_cache_valid 200 5m;
        proxy_cache_use_stale error timeout updating;
        proxy_no_cache $cookie_nocache $arg_nocache $arg_comment;
        proxy_cache_bypass $cookie_nocache $arg_nocache $arg_comment;

        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;

        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
    }

    # API Gateway endpoint
    location /api/ {
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://api_gateway_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_forwarded_for;
        proxy_set_header X-Forwarded-Proto $proxy_forwarded_proto;
        proxy_set_header X-Request-ID $request_id;

        # API-specific rate limiting
        limit_req zone=api_limit burst=10 nodelay;

        # API timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Request-ID" always;

        if ($request_method = OPTIONS) {
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type text/plain charset=utf-8;
            add_header Content-Length 0;
            return 204;
        }
    }

    # WebSocket endpoint
    location /ws {
        proxy_pass http://labeling_backend_direct;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_forwarded_for;
        proxy_set_header X-Forwarded-Proto $proxy_forwarded_proto;

        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        proxy_buffering off;

        # WebSocket-specific headers
        proxy_set_header Sec-WebSocket-Protocol chat;
    }

    # Payment backend direct access (for webhooks)
    location /payment-webhook/ {
        proxy_pass http://payment_backend_direct;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_forwarded_for;
        proxy_set_header X-Forwarded-Proto $proxy_forwarded_proto;
        proxy_set_header X-Request-ID $request_id;

        # Security for payment webhooks
        limit_req zone=login_limit burst=5 nodelay;

        # Payment processing timeouts
        proxy_connect_timeout 120s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
    }

    # Health check endpoint
    location /nginx-health {
        access_log off;
        return 200 "nginx is healthy\n";
        add_header Content-Type text/plain;
    }

    # Metrics endpoint for monitoring
    location /nginx-metrics {
        access_log off;
        stub_status on;
        allow 127.0.0.1;
        allow 10.10.0.0/24;  # Monitoring network
        deny all;
    }

    # Robots.txt
    location = /robots.txt {
        return 200 "User-agent: *\nDisallow: /api/\nDisallow: /admin/\nDisallow: /payment-webhook/\n";
        add_header Content-Type text/plain;
    }

    # Security.txt
    location = /security.txt {
        return 200 "Contact: security@labelmint.com\nExpires: 2025-12-31T23:59:59.000Z\n";
        add_header Content-Type text/plain;
    }

    # Well-known endpoints
    location ~ ^/.well-known/(.*)$ {
        try_files $uri =404;
        add_header Access-Control-Allow-Origin "*";
    }

    # Default error pages
    error_page 400 401 403 404 405 408 500 502 503 504 /error.html;
    location = /error.html {
        internal;
        proxy_pass http://web_backend;
        proxy_intercept_errors on;
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Status $status;
    }

    # Access and error logs
    access_log /var/log/nginx/access.log detailed;
    error_log /var/log/nginx/error.log warn;
}