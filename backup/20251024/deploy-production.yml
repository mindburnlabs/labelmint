name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
  push:
    branches:
      - main
    paths:
      - 'services/**'
      - 'apps/**'
      - 'packages/**'
      - 'infrastructure/docker/**'
      - 'docker-compose.prod.yml'

env:
  NODE_VERSION: 20
  PNPM_VERSION: 9.15.1

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test

      - name: Build packages
        run: pnpm build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get ECR repository URI
        id: ecr-repo
        run: |
          echo "ECR_REPOSITORY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.us-east-1.amazonaws.com/labelmint-it" >> $GITHUB_OUTPUT

      - name: Build and push labeling-backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.ecr-repo.outputs.ECR_REPOSITORY }}
        run: |
          docker build -f Dockerfile.labeling-backend -t $ECR_REGISTRY/$ECR_REPOSITORY:labeling-backend-${{ github.sha }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:labeling-backend-${{ github.sha }}
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:labeling-backend-${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:labeling-backend:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:labeling-backend:latest

      - name: Build and push payment-backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.ecr-repo.outputs.ECR_REPOSITORY }}
        run: |
          docker build -f Dockerfile.payment-backend -t $ECR_REGISTRY/$ECR_REPOSITORY:payment-backend-${{ github.sha }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:payment-backend-${{ github.sha }}
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:payment-backend-${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:payment-backend:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:payment-backend:latest

      - name: Build and push web image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.ecr-repo.outputs.ECR_REPOSITORY }}
        run: |
          docker build -f Dockerfile.web -t $ECR_REGISTRY/$ECR_REPOSITORY:web-${{ github.sha }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:web-${{ github.sha }}
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:web-${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:web:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:web:latest

      - name: Build and push telegram-mini-app image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.ecr-repo.outputs.ECR_REPOSITORY }}
        run: |
          cd apps/telegram-mini-app
          docker build -f Dockerfile.telegram-mini-app -t $ECR_REGISTRY/$ECR_REPOSITORY:telegram-mini-app-${{ github.sha }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:telegram-mini-app-${{ github.sha }}
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:telegram-mini-app-${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:telegram-mini-app:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:telegram-mini-app:latest

      - name: Update production server
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/labelmint-it

            # Backup current deployment
            ./scripts/backup/backup.sh

            # Pull latest images
            docker-compose -f docker-compose.prod.yml pull

            # Deploy new version
            IMAGE_TAG=${{ github.sha }}
            docker-compose -f docker-compose.prod.yml up -d

            # Run health checks
            ./scripts/health-check.sh

            # Cleanup old images
            docker image prune -f

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Deployment ${{ job.status }} for Deligate.it
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref }}
            Environment: ${{ github.event.inputs.environment || 'production' }}